---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Chart.Name }}
data:
  label_master_loop.sh: |
    #!/bin/bash
    if [[ $1 == "--config" ]] ; then
      cat <<EOF
    {
      "configVersion":"v1",
      "kubernetes": [
        {
          "apiVersion": "v1",
          "kind": "Endpoints",
          "executeHookOnEvent": [
            "Added",
            "Modified"
          ],
          "labelSelector": {
            "matchLabels": {
            {{- range $i, $val := .Values.label_endpoint }}
              {{ $i | quote }}: {{ $val | quote }},
            {{- end }}
            }
          },
          "namespace": {
            "nameSelector": {
              "matchNames": [
                {{ .Release.Namespace | quote }}
              ]
            }
          }
        }
      ]
    }
    EOF
    else

      ### for debug
      # set -x
      # cat $BINDING_CONTEXT_PATH >> /tmp/log-$(date +%s).txt

      function atoi
      {
        #Returns the integer representation of an IP arg, passed in ascii dotted-decimal notation (x.x.x.x)
        IP=$1; IPNUM=0
        for (( i=0 ; i<4 ; ++i )); do
          ((IPNUM+=${IP%%.*}*$((256**$((3-${i}))))))
          IP=${IP#*.}
        done
        echo $IPNUM
      }

      ns={{ .Release.Namespace }}
      find=false
      maxIp="0"
      podName=""
      jq_selector=""

      type=$(jq -r '.[0].type' $BINDING_CONTEXT_PATH)

      if [[ $type == "Synchronization" ]] ; then
        jq_selector=".[] | select(.objects != null) | .objects[].object | select(.subsets != null) | .subsets[] | select(.addresses != null) |.addresses[]"
      elif [[ $type == "Event" ]] ; then
        jq_selector=".[].object | select(.subsets != null) | .subsets[] | select(.addresses != null) |.addresses[]"
      fi


      # find all IP from endpoint
      for ip in $(jq -r "$jq_selector | .ip" $BINDING_CONTEXT_PATH)
      do
        a=$(atoi $ip)
        b=$(atoi $maxIp)

        # compare IPs, remember max IP
        if [[ $a > $b ]]; then
          maxIp=$ip
          find=true
        fi
      done

      if $find; then
        # get podName by IP
        podName=$(jq -r "$jq_selector | select(.ip == \"$maxIp\") | .targetRef.name" $BINDING_CONTEXT_PATH)
      fi


      for pod in $(kubectl -n $ns get po -l loop-master -o json | jq -r '.items[] | .metadata.name')
      do
        if [ "$pod" != "$podName" ]; then
          echo "Unlabel $pod for master"
          kubectl -n $ns label pod $pod loop-master-
        fi
      done

      if $find; then
        echo "Found pod with max ip: $podName, $maxIp"

        # echo "Label $podName for master"
        kubectl -n $ns label pod $podName --overwrite loop-master=""
      else
        echo "WARN: nothing found"
      fi

    fi
